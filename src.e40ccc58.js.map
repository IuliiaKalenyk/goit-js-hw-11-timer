{"version":3,"sources":["index.js"],"names":["refs","timer","document","querySelector","days","hours","mins","secs","console","log","CountdownTimer","selector","targetDate","intervalId","isActive","Date","now","setInterval","currentTime","time","getTimeComponents","clearInterval","pad","Math","floor","updateClockface","textContent","value","String","padStart","start"],"mappings":";AAyDC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAzDDA,KAAO,CACLC,MAAOC,SAASC,cAAc,UAC9BC,KAAMF,SAASC,cAAc,uBAC7BE,MAAOH,SAASC,cAAc,wBAC9BG,KAAMJ,SAASC,cAAc,uBAC7BI,KAAML,SAASC,cAAc,wBAE/BK,QAAQC,IAAIT,KAAKC,OAEXS,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EA2CrB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAzCC,MAAA,WAAQ,IAAA,EAAA,KACH,IAAA,KAAKE,SAAL,CAGeC,KAAKC,MAClBF,KAAAA,UAAW,EAEXD,KAAAA,WAAaI,YAAY,WACtBC,IAAAA,EAAcH,KAAKC,MAEnBG,EAAOC,EADK,EAAKR,WAAaM,GAGpC,EAAKP,SAASQ,IACb,QA4BN,CAAA,IAAA,OA1BC,MAAA,WACEE,cAAcR,YACTC,KAAAA,UAAW,MAwBnB,EAhDKJ,GA4BN,SAASU,EAAkBD,GAKlB,MAAA,CAAEf,KAJIkB,EAAIC,KAAKC,MAAML,EAAQ,QAIrBd,MAHDiB,EAAIC,KAAKC,MAAOL,EAAQ,MAAyB,OAGzCb,KAFTgB,EAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MAE7BZ,KADfe,EAAIC,KAAKC,MAAOL,EAAQ,IAAc,OAGrD,SAASM,EAA6C,GAA3BrB,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5CP,KAAKC,MAAMyB,YAAiBtB,GAAAA,OAAAA,EAAYC,SAAAA,OAAAA,EAAcC,UAAAA,OAAAA,EAAYC,SAAAA,OAAAA,EAAlE,QAGF,SAASe,EAAIK,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnC,IAAM5B,EAAQ,IAAIS,EAAe,CAC/BC,SAAUc,EACVb,WAAY,IAAIG,KAAK,kBAGtBd,EAAM6B","file":"src.e40ccc58.js","sourceRoot":"../src","sourcesContent":["refs = {\n  timer: document.querySelector('.timer'),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\nconsole.log(refs.timer);\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.selector = selector;\n    this.targetDate = targetDate;\n  }\n  start() {\n    if(this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    \n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = this.targetDate - currentTime;\n      const time = getTimeComponents(deltaTime);\n      \n      this.selector(time);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(intervalId);\n    this.isActive = false;\n  }\n};\n\nfunction getTimeComponents(time) {\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n  return { days, hours, mins, secs };\n}\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.timer.textContent = `${days}days:${hours}hours:${mins}mins:${secs}secs`;\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nconst timer = new CountdownTimer({\n  selector: updateClockface,\n  targetDate: new Date('Jul 17, 2021'),\n});\n\n timer.start();"]}